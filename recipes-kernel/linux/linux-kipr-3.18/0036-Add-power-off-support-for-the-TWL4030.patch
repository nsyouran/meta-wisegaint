From e42305d970c71a0bce912acb0dfbd9b19d0a3c48 Mon Sep 17 00:00:00 2001
From: Ash Charles <ashcharles@gmail.com>
Date: Mon, 7 Sep 2015 11:58:34 -0700
Subject: [PATCH 36/45] Add power-off support for the TWL4030

Originally proposed by Bernhard Aichriedled and Kris Duff [1] with thanks.

[1] http://gumstix.8.x6.nabble.com/fido-dizzy-gumstix-overo-ironstorm-y-will-not-shutdown-after-a-halt-command-td4970220.html
---
 drivers/mfd/Kconfig    |  6 ++++++
 drivers/mfd/twl-core.c | 41 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 47 insertions(+)

diff --git a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
index 1456ea70bbc7..5f094ab5652d 100644
--- a/drivers/mfd/Kconfig
+++ b/drivers/mfd/Kconfig
@@ -1083,6 +1083,12 @@ config TWL4030_POWER
 	  and load scripts controlling which resources are switched off/on
 	  or reset when a sleep, wakeup or warm reset event occurs.
 
+config TWL4030_POWEROFF
+	bool "TWL4030 Allow power-off on shutdown"
+	depends on TWL4030_CORE
+	help
+	  Enables the CPU to power-off the system on shutdown
+
 config MFD_TWL4030_AUDIO
 	bool "TI TWL4030 Audio"
 	depends on TWL4030_CORE
diff --git a/drivers/mfd/twl-core.c b/drivers/mfd/twl-core.c
index db11b4f40611..149c8590f4e0 100644
--- a/drivers/mfd/twl-core.c
+++ b/drivers/mfd/twl-core.c
@@ -67,6 +67,12 @@
 
 #define DRIVER_NAME			"twl"
 
+#if defined (CONFIG_TWL4030_POWEROFF)
+#define twl_has_poweroff() true
+#else
+#define twl_has_poweroff() false
+#endif
+
 /* Triton Core internal information (BEGIN) */
 
 /* Base Address defns for twl4030_map[] */
@@ -106,6 +112,10 @@
 #define TWL4030_BASEADD_RTC		0x001C
 #define TWL4030_BASEADD_SECURED_REG	0x0000
 
+/* for pm_power_off */
+#define PWR_P1_SW_EVENTS 		0x10
+#define PWR_DEVOFF	 		(1 << 0)
+
 /* Triton Core internal information (END) */
 
 
@@ -1075,6 +1085,31 @@ static int twl_remove(struct i2c_client *client)
 	return 0;
 }
 
+static void twl_poweroff(void)
+{
+	int err;
+	u8 val;
+
+	err = twl_i2c_read_u8(TWL_MODULE_PM_MASTER, &val,
+				  PWR_P1_SW_EVENTS);
+	if (err) {
+		pr_err("%s: i2c error %d while reading TWL4030"
+			"PM_MASTER P1_SW_EVENTS\n",
+			DRIVER_NAME, err);
+		return;
+	}
+
+	val |= PWR_DEVOFF;
+
+	err = twl_i2c_write_u8(TWL_MODULE_PM_MASTER, val,
+				   PWR_P1_SW_EVENTS);
+	if (err)
+		pr_err("%s: i2c error %d while writing TWL4030"
+			"PM_MASTER P1_SW_EVENTS\n",
+			DRIVER_NAME, err);
+}
+
+
 static struct of_dev_auxdata twl_auxdata_lookup[] = {
 	OF_DEV_AUXDATA("ti,twl4030-gpio", 0, "twl4030-gpio", NULL),
 	{ /* sentinel */ },
@@ -1229,6 +1264,12 @@ twl_probe(struct i2c_client *client, const struct i2c_device_id *id)
 				 TWL4030_DCDC_GLOBAL_CFG);
 	}
 
+	if(twl_has_poweroff())
+	{
+		/* initialize pm_power_off routine */
+		pm_power_off = twl_poweroff;
+	}
+
 	if (node) {
 		if (pdata)
 			twl_auxdata_lookup[0].platform_data = pdata->gpio;
-- 
2.1.4

